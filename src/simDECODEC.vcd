$date
	Tue Jun 30 15:39:56 2015
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module waka $end
$var wire 6 ! branchdir [5:0] $end
$var wire 1 " branchenable $end
$var wire 8 # inm [7:0] $end
$var wire 10 $ jmpdir [9:0] $end
$var wire 1 % jmpenable $end
$var wire 10 & memdir [9:0] $end
$var wire 6 ' opcode [5:0] $end
$var wire 2 ( sela [1:0] $end
$var wire 2 ) selb [1:0] $end
$var wire 1 * selm1 $end
$var wire 1 + selm2 $end
$var wire 1 , wrenable $end
$var reg 1 - Clock $end
$var reg 1 . Reset $end
$var reg 16 / data [15:0] $end
$var reg 3 0 flaga [2:0] $end
$var reg 3 1 flagb [2:0] $end
$scope module d0 $end
$var wire 6 2 branchDir [5:0] $end
$var wire 1 3 clk $end
$var wire 3 4 flagA [2:0] $end
$var wire 3 5 flagB [2:0] $end
$var wire 16 6 in [15:0] $end
$var wire 8 7 inm [7:0] $end
$var wire 10 8 jmpDir [9:0] $end
$var wire 10 9 memDir [9:0] $end
$var wire 6 : opCode [5:0] $end
$var wire 1 ; reset $end
$var reg 1 < branchEnable $end
$var reg 1 = jmpEnable $end
$var reg 2 > selA [1:0] $end
$var reg 2 ? selB [1:0] $end
$var reg 1 @ selM1 $end
$var reg 1 A selM2 $end
$var reg 1 B wrEnable $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xB
xA
x@
bx ?
bx >
x=
x<
x;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
03
bx 2
bx 1
bx 0
bx /
x.
0-
x,
x+
x*
bx )
bx (
bx '
bx &
x%
bx $
bx #
x"
bx !
$end
#5000
0<
0"
0=
0%
0B
0,
1A
1+
0@
0*
b0 ?
b0 )
b0 >
b0 (
1.
1;
1-
13
#10000
0.
0;
0-
03
#15000
b10000000 #
b10000000 7
b10000000 &
b10000000 9
b0 !
b0 2
b10000000 $
b10000000 8
b0 '
b0 :
b0 1
b0 5
b0 0
b0 4
b10000000 /
b10000000 6
1-
13
#20000
0-
03
#25000
b11 >
b11 (
b1010000000 &
b1010000000 9
b1010000000 $
b1010000000 8
1-
13
b1010000000 /
b1010000000 6
#30000
0-
03
#35000
b11 ?
b11 )
b0 >
b0 (
b10000000 &
b10000000 9
b10000000 $
b10000000 8
b1 '
b1 :
1-
13
b10010000000 /
b10010000000 6
#40000
0-
03
#45000
b1010000000 &
b1010000000 9
b1010000000 $
b1010000000 8
1-
13
b11010000000 /
b11010000000 6
#50000
0-
03
#55000
0A
0+
1@
1*
b0 ?
b0 )
b1 >
b1 (
b10000000 &
b10000000 9
b10000000 $
b10000000 8
b10 '
b10 :
1-
13
b100010000000 /
b100010000000 6
#60000
0-
03
#65000
b1010000000 &
b1010000000 9
b1010000000 $
b1010000000 8
1-
13
b101010000000 /
b101010000000 6
#70000
0-
03
#75000
b1 ?
b1 )
b0 >
b0 (
b10000000 &
b10000000 9
b10000000 $
b10000000 8
b11 '
b11 :
1-
13
b110010000000 /
b110010000000 6
#80000
0-
03
#85000
b1010000000 &
b1010000000 9
b1010000000 $
b1010000000 8
1-
13
b111010000000 /
b111010000000 6
#90000
0-
03
#95000
1A
1+
0@
0*
b0 ?
b0 )
b11 >
b11 (
b10000000 &
b10000000 9
b10000000 $
b10000000 8
b0 '
b0 :
1-
13
b10000000 /
b10000000 6
#100000
0-
03
#105000
b1010000000 &
b1010000000 9
b1010000000 $
b1010000000 8
1-
13
b1010000000 /
b1010000000 6
#110000
0-
03
#115000
b11 ?
b11 )
b0 >
b0 (
b10000000 &
b10000000 9
b10000000 $
b10000000 8
b1 '
b1 :
1-
13
b10010000000 /
b10010000000 6
#120000
0-
03
#125000
b1010000000 &
b1010000000 9
b1010000000 $
b1010000000 8
1-
13
b11010000000 /
b11010000000 6
#130000
0-
03
#135000
0A
0+
1@
1*
b0 ?
b0 )
b1 >
b1 (
b10000000 &
b10000000 9
b10000000 $
b10000000 8
b10 '
b10 :
1-
13
b100010000000 /
b100010000000 6
#140000
0-
03
#145000
b1010000000 &
b1010000000 9
b1010000000 $
b1010000000 8
1-
13
b101010000000 /
b101010000000 6
#150000
0-
03
#155000
b1 ?
b1 )
b0 >
b0 (
b10000000 &
b10000000 9
b10000000 $
b10000000 8
b11 '
b11 :
1-
13
b110010000000 /
b110010000000 6
#160000
0-
03
#165000
b1010000000 &
b1010000000 9
b1010000000 $
b1010000000 8
1-
13
b111010000000 /
b111010000000 6
#170000
0-
03
#175000
1B
1,
0@
0*
b0 ?
b0 )
b10000000 &
b10000000 9
b10000000 $
b10000000 8
b100 '
b100 :
1-
13
b1000010000000 /
b1000010000000 6
#180000
0-
03
#185000
b1010000000 &
b1010000000 9
b1010000000 $
b1010000000 8
1-
13
b1001010000000 /
b1001010000000 6
#190000
0-
03
#195000
1A
1+
1@
1*
b10000000 &
b10000000 9
b10000000 $
b10000000 8
b101 '
b101 :
1-
13
b1010010000000 /
b1010010000000 6
#200000
0-
03
#205000
b1010000000 &
b1010000000 9
b1010000000 $
b1010000000 8
1-
13
b1011010000000 /
b1011010000000 6
#210000
0-
03
#215000
1-
13
